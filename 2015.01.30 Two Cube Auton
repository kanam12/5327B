#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    pot,            sensorPotentiometer)
#pragma config(Sensor, in2,    pot2,           sensorPotentiometer)
#pragma config(Sensor, in3,    pot3,           sensorPotentiometer)
#pragma config(Sensor, in4,    pot4,           sensorPotentiometer)
#pragma config(Sensor, in5,    pot5,           sensorPotentiometer)
#pragma config(Sensor, in6,    pot6,           sensorPotentiometer)
#pragma config(Sensor, in7,    pot7,           sensorPotentiometer)
#pragma config(Sensor, in8,    pot8,           sensorPotentiometer)
#pragma config(Sensor, dgtl9,  PistonL,        sensorDigitalOut)
#pragma config(Sensor, dgtl10, PistonI,        sensorDigitalOut)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           RRoller,       tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           LTLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           LBLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           RBLift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           RTLift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           RBBase,        tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_1)
#pragma config(Motor,  port7,           RFBase,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           LBBase,        tmotorVex393_MC29, openLoop, encoderPort, I2C_2)
#pragma config(Motor,  port9,           LFBase,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          LRoller,       tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int lockstate = 0;
int skyrise = 0;
void autoReset()
{
	nMotorEncoder[LBBase] = 0;
	nMotorEncoder[RBBase] = 0;
}

task main()
{
	while (true)
	{
		if(vexRT[Btn8U] == 1)
		{
			autoReset();
			skyrise = 1;
			SensorValue[PistonI] = 1;
			wait1Msec(100);
			motor[LBBase] =  127; // Seting left back to 127.
			motor[RBBase] =  127; // Seting right back to 127.
			motor[LFBase] =  127; // Seting left front to 127.
			motor[RFBase] =  127; // Seting right front to 127.
			wait1Msec(1000);
			motor[LBBase] =  0; // Seting left back to 0.
			motor[RBBase] =  0; // Seting right back to 0.
			motor[LFBase] =  0; // Seting left front to 0.
			motor[RFBase] =  0; // Seting right front to 0.

			motor[RRoller] = 127;
			motor[LRoller] = 127;
			wait1Msec(200);
			motor[RRoller] = 0;
			motor[LRoller] = 0;

			motor[RBLift] = 127;
			motor[LBLift] = 127;
			motor[RTLift] = 127;
			motor[LTLift] = 127;
			while(SensorValue[pot] < 2800)
			{
			}
			motor[RBLift] = 0;
			motor[LBLift] = 0;
			motor[RTLift] = 0;
			motor[LTLift] = 0;
			lockstate = 1;
		  SensorValue;

			motor[RFBase] = 65;
			motor[RBBase] = 65;
			motor[LFBase] = -65;
			motor[LBBase] = -65;
			wait1Msec(200);
			motor[RFBase] = 0;
			motor[RBBase] = 0;
			motor[LFBase] = 0;
			motor[LBBase] = 0;

			motor[RRoller] = -80;
			motor[LRoller] = -80;
			wait1Msec(500);
			motor[RRoller] = 0;
			motor[LRoller] = 0;
		}
	}
}
