#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    pot,            sensorPotentiometer)
#pragma config(Sensor, in2,    pot2,           sensorPotentiometer)
#pragma config(Sensor, in3,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl8,  PistonR,        sensorDigitalOut)
#pragma config(Sensor, dgtl9,  PistonL,        sensorDigitalOut)
#pragma config(Sensor, dgtl10, PistonI,        sensorDigitalOut)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           RRoller,       tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           LTLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           LBLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           RBLift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           RTLift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           RBBase,        tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_1)
#pragma config(Motor,  port7,           RFBase,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           LBBase,        tmotorVex393_MC29, openLoop, encoderPort, I2C_2)
#pragma config(Motor,  port9,           LFBase,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          LRoller,       tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int lockstate = 0;
int skyrise = 0;

void pre_auton()
{
	SensorType[in3] = sensorNone;
	wait1Msec(1000);
	SensorType[in3] = sensorGyro;
	wait1Msec(2000);
}

void autoreset()
{
	nMotorEncoder[LBBase] = 0;
	nMotorEncoder[RBBase] = 0;
}

task main()
{
	while(true)
	{
		if(vexRT[Btn8U] == 1)
		{
			autoreset();
			motor[LBBase] =  -127;
			motor[RBBase] =  -127;
			motor[LFBase] =  -127;
			motor[RFBase] =  -127;
			wait1Msec(500);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//backwards
			skyrise = 1;
			SensorValue[PistonI] = 1;
			wait1Msec(100);
			skyrise = 0;
			SensorValue[PistonI] = 0;
			//reset claw
			motor[LBBase] =  127;
			motor[RBBase] =  127;
			motor[LFBase] =  127;
			motor[RFBase] =  127;
			wait1Msec(500);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//pick up skyrise
			skyrise = 1;
			SensorValue[PistonI] = 1;
			//lift up
			motor[LBLift] = 127;
			motor[RBLift] = 127;
			motor[LTLift] = 127;
			motor[RTLift] = 127;
			wait1Msec(300);
			motor[LBLift] = 0;
			motor[RBLift] = 0;
			motor[LTLift] = 0;
			motor[RTLift] = 0;
			//back
			motor[LBBase] =  -127;
			motor[RBBase] =  -127;
			motor[LFBase] =  -127;
			motor[RFBase] =  -127;
			wait1Msec(250);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//lift down
			motor[LBLift] = -127;
			motor[RBLift] = -127;
			motor[LTLift] = -127;
			motor[RTLift] = -127;
			wait1Msec(300);
			motor[LBLift] = 0;
			motor[RBLift] = 0;
			motor[LTLift] = 0;
			motor[RTLift] = 0;
			//back
			motor[LBBase] =  -127;
			motor[RBBase] =  -127;
			motor[LFBase] =  -127;
			motor[RFBase] =  -127;
			wait1Msec(500);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			/* //Delete the two characters before this to uncomment :)
			//turn
			motor[LBBase] =  67;
			motor[RBBase] =  -67;
			motor[LFBase] =  67;
			motor[RFBase] =  -67;
			wait1Msec(250);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//forward
			motor[LBBase] =  127;
			motor[RBBase] =  127;
			motor[LFBase] =  127;
			motor[RFBase] =  127;
			wait1Msec(750);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//drop skyrise
			skyrise = 0;
			SensorValue[PistonI} = 0;
			//back
			motor[LBBase] =  -127;
			motor[RBBase] =  -127;
			motor[LFBase] =  -127;
			motor[RFBase] =  -127;
			wait1Msec(250);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//lift up
			motor[LBLift] = 127;
			motor[RBLift] = 127;
			motor[LTLift] = 127;
			motor[RTLift] = 127;
			wait1Msec(300);
			motor[LBLift] = 0;
			motor[RBLift] = 0;
			motor[LTLift] = 0;
			motor[RTLift] = 0;
			lockstate = 1
			SensorValue[PistonL] = 1

			//outtaked
			motor[RRoller] = -60;
			motor[LRoller] = -60;
			wait1Msec(250);
			motor[RRoller] = 0;
			motor[LRoller] = 0;
			lockstate = 0
			SensorValue[PistonL] = 0
			//*/
		}
	}
}
