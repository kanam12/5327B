#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in2,    pot,            sensorPotentiometer)
#pragma config(Sensor, in3,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl8,  PistonR,        sensorDigitalOut)
#pragma config(Sensor, dgtl9,  PistonL,        sensorDigitalOut)
#pragma config(Sensor, dgtl10, PistonI,        sensorDigitalOut)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           RRoller,       tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           LTLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           LBLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           RBLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           RTLift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           RBBase,        tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_1)
#pragma config(Motor,  port7,           RFBase,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           LBBase,        tmotorVex393_MC29, openLoop, encoderPort, I2C_2)
#pragma config(Motor,  port9,           LFBase,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          LRoller,       tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int lockstate = 0;
int skyrise = 0;

void forward()
{
	motor[RBBase] = vexRT[Ch2];
	motor[RFBase] = vexRT[Ch2];
	motor[LBBase] = vexRT[Ch3];
	motor[LFBase] = vexRT[Ch3];
}

void pneumatic()
{
	if(vexRT[Btn7U] == 1)
	{
		lockstate = 0;
		SensorValue[PistonL] = 0;
		SensorValue[PistonR] = 0;
	}
	if(vexRT[Btn7L] == 1)
	{
		lockstate = 1;
		SensorValue[PistonL] = 1;
		SensorValue[PistonR] = 1;
	}
	if(vexRT[Btn7R] == 1)
	{
		skyrise = 0;
		SensorValue[PistonI] = 0;
	}
	if(vexRT[Btn7D] == 1)
	{
		skyrise = 1;
		SensorValue[PistonI] = 1;
	}
}

void roller()
{
	if(vexRT[Btn6D] == 1)
	{
		motor[RRoller] = 127;
		motor[LRoller] = 127;
	}
	else if(vexRT[Btn6U] == 1)
	{
		motor[RRoller] = -127;
		motor[LRoller] = -127;
	}
	else
	{
		motor[RRoller] = 0;
		motor[LRoller] = 0;
	}

}
void potentiometer()
{
	if(vexRT[Btn5U] == 1)
	{
		motor[LTLift] = 100;
		motor[LBLift] = 100;
		motor[RBLift] = 100;
		motor[RTLift] = 100;
	}
	else if(vexRT[Btn5D] == 1 && SensorValue[pot] > 40)
	{
		if(lockstate == 1)
		{
			lockstate = 0;
			SensorValue[PistonL] = 0;
			SensorValue[PistonR] = 0;
			wait1Msec(150);
		}
		motor[LTLift] = -80;
		motor[LBLift] = -80;
		motor[RBLift] = -80;
		motor[RTLift] = -80;
	}
	else if(vexRT[Btn7R] == 1)
	{
		motor[LTLift] = 40;
		motor[LBLift] = 40;
		motor[RBLift] = 40;
		motor[RTLift] = 40;
	}
	else if(vexRT[Btn7D] == 1 && SensorValue[pot] > 1250)
	{
		if(lockstate == 1)
		{
			lockstate = 0;
			SensorValue[PistonL] = 0;
			SensorValue[PistonR] = 0;
			wait1Msec(150);
		}
		motor[LTLift] = -65;
		motor[LBLift] = -65;
		motor[RBLift] = -65;
		motor[RTLift] = -65;
	}
	else
	{
		motor[LTLift] = 0;
		motor[LBLift] = 0;
		motor[RBLift] = 0;
		motor[RTLift] = 0;
	}
	pneumatic();
}

task main()
{
	while (true)
	{
		if(vexRT[Btn8U] == 1)
		{
			motor[RBBase] = 65;
			motor[LBBase] = 65;
			motor[RFBase] = 65;
			motor[LFBase] = 65;

		}
		else if(vexRT[Btn8D] == 1)
		{
			motor[RBBase] = -65;
			motor[LBBase] = -65;
			motor[RFBase] = -65;
			motor[LFBase] = -65;

		}
		else
		{
			forward();
		}
		roller();
		potentiometer();
		pneumatic();
	}
}
