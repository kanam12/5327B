#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    pot,            sensorPotentiometer)
#pragma config(Sensor, in2,    pot2,           sensorPotentiometer)
#pragma config(Sensor, in3,    pot3,           sensorPotentiometer)
#pragma config(Sensor, in4,    pot4,           sensorPotentiometer)
#pragma config(Sensor, in5,    pot5,           sensorPotentiometer)
#pragma config(Sensor, in6,    pot6,           sensorPotentiometer)
#pragma config(Sensor, in7,    pot7,           sensorPotentiometer)
#pragma config(Sensor, in8,    pot8,           sensorPotentiometer)
#pragma config(Sensor, dgtl9,  PistonL,        sensorDigitalOut)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           RRoller,       tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           LTLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           LBLift,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           RBLift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           RTLift,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           RBBase,        tmotorVex393_MC29, openLoop, reversed, encoderPort, I2C_1)
#pragma config(Motor,  port7,           RFBase,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           LBBase,        tmotorVex393_MC29, openLoop, encoderPort, I2C_2)
#pragma config(Motor,  port9,           LFBase,        tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          LRoller,       tmotorVex393_HBridge, openLoop, reversed)


void autoReset()
{
	nMotorEncoder[LBBase] = 0;
	nMotorEncoder[RBBase] = 0;
}

task main()
{
	while (true)
	{
		if(vexRT[Btn8U] == 1)
		{
			autoReset();
			motor[LBBase] =  -127; // Seting left back to -127.
			motor[RBBase] =  -127; // Seting right back to -127.
			motor[LFBase] =  -127; // Seting left front to -127.
			motor[RFBase] =  -127; // Seting right front to -127.
			wait1Msec(500);
			motor[LBBase] =  0; // Seting left back to 0.
			motor[RBBase] =  0; // Seting right back to 0.
			motor[LFBase] =  0; // Seting left front to 0.
			motor[RFBase] =  0; // Seting right front to 0.
			//goes back


			motor[RBLift] = 127;
			motor[LBLift] = 127;
			motor[RTLift] = 127;
			motor[LTLift] = 127;
			while(SensorValue[pot] < 2800)
			{
			}
			motor[RBLift] = 0;
			motor[LBLift] = 0;
			motor[RTLift] = 0;
			motor[LTLift] = 0;
			//lift up



			motor[RBLift] = -50;
			motor[LBLift] = -50;
			motor[RTLift] = -50;
			motor[LTLift] = -50;
			while(SensorValue[pot] > 2400)
			{
			}
			motor[RBLift] = 0;
			motor[LBLift] = 0;
			motor[RTLift] = 0;
			motor[LTLift] = 0;
			//lift back down

			wait1Msec(250);

			motor[LBBase] =  65;
			motor[RBBase] =  65;
			motor[LFBase] =  65;
			motor[RFBase] =  65;
			wait1Msec(750);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//pick up skyrise


			motor[RBLift] = 65;
			motor[LBLift] = 65;
			motor[RTLift] = 65;
			motor[LTLift] = 65;
			while(SensorValue[pot] < 2700)
			{
			}
			motor[RBLift] = 0;
			motor[LBLift] = 0;
			motor[RTLift] = 0;
			motor[LTLift] = 0;
			//lift up

			wait1Msec(250);


			motor[LBBase] =  65;
			motor[RBBase] =  -65;
			motor[LFBase] =  65;
			motor[RFBase] =  -65;
			wait1Msec(520);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;
			//pivot
			motor[LBBase] = 65;
			motor[LFBase] = 65;
			motor[RFBase] = 65;
			motor[RBBase] = 65;

			wait1Msec(275);
			motor[LBBase] = 0;
			motor[LFBase] = 0;
			motor[RFBase] = 0;
			motor[RBBase] = 0;

			motor[RBLift] = -50;
			motor[LBLift] = -50;
			motor[RTLift] = -50;
			motor[LTLift] = -50;
			while(SensorValue[pot] > 1500)
			{
			}
			motor[RBLift] = 0;
			motor[LBLift] = 0;
			motor[RTLift] = 0;
			motor[LTLift] = 0;
			//lift back down*/
			motor[LBBase] =  -127; // Seting left back to -127.
			motor[RBBase] =  -127; // Seting right back to -127.
			motor[LFBase] =  -127; // Seting left front to -127.
			motor[RFBase] =  -127; // Seting right front to -127.
			wait1Msec(500);
			motor[LBBase] =  0; // Seting left back to 0.
			motor[RBBase] =  0; // Seting right back to 0.
			motor[LFBase] =  0; // Seting left front to 0.
			motor[RFBase] =  0; // Seting right front to 0.

			motor[RBLift] = 65;
			motor[LBLift] = 65;
			motor[RTLift] = 65;
			motor[LTLift] = 65;
			while(SensorValue[pot] < 2700)
			{
			}
			motor[RBLift] = 0;
			motor[LBLift] = 0;
			motor[RTLift] = 0;
			motor[LTLift] = 0;
			//lift up

			wait1Msec(250);


			motor[LBBase] =  -65;
			motor[RBBase] =  65;
			motor[LFBase] =  -65;
			motor[RFBase] =  65;
			wait1Msec(300);
			motor[LBBase] =  0;
			motor[RBBase] =  0;
			motor[LFBase] =  0;
			motor[RFBase] =  0;

		wait1Msec(15);
			motor[LBBase] = 65;
			motor[LFBase] = 65;
			motor[RFBase] = 65;
			motor[RBBase] = 65;

			wait1Msec(275);
			motor[LBBase] = 0;
			motor[LFBase] = 0;
			motor[RFBase] = 0;
			motor[RBBase] = 0;

			//pivot

			motor[RBLift] = -50;
			motor[LBLift] = -50;
			motor[RTLift] = -50;
			motor[LTLift] = -50;
			while(SensorValue[pot] > 2000)
			{
			}
			motor[RBLift] = 0;
			motor[LBLift] = 0;
			motor[RTLift] = 0;
			motor[LTLift] = 0;
			motor[LBBase] = -65;
			motor[LFBase] = -65;
			motor[RFBase] = -65;
			motor[RBBase] = -65;

			wait1Msec(150);
			motor[LBBase] = 0;
			motor[LFBase] = 0;
			motor[RFBase] = 0;
			motor[RBBase] = 0;

			motor[RRoller] = -127;
			motor[RRoller] = -127;
			wait1Msec(2500);
			motor[RRoller] = 0;
			motor[RRoller] = 0;


		}
	}
}
